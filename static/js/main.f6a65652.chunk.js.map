{"version":3,"sources":["styles/assets/logo_turkey.png","components/Button/index.tsx","components/Modal/index.tsx","api/index.tsx","components/Form/index.tsx","styles/assets/text_restaurant_name.png","components/AppBar/index.tsx","pages/Dashboard/index.tsx","components/DetailCard/index.tsx","pages/Detail/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddButton","onClick","text","Button","color","FormModal","open","handleClose","children","style","display","alignItems","justifyContent","Modal","onClose","backgroundColor","width","height","payload","a","path","method","body","url","fetch","headers","JSON","stringify","undefined","response","json","responseBody","status","message","Error","Form","useState","title","setTitle","temp","setTemp","time","setTime","ingredients","setIngredients","handleSubmit","api","parseInt","split","flexDirection","marginLeft","marginTop","className","FormControl","InputLabel","htmlFor","Input","id","type","value","onChange","e","target","multiline","StyledAppBar","AppBar","position","background","textAlign","Toolbar","margin","src","TastyTurkeyText","alt","Dashboard","to","DetailCard","setSelectedRecipe","logo","map","ingredient","Math","random","getRecipes","Detail","selectedRecipe","recipes","setRecipes","useEffect","fetchRecipes","recipe","App","modalOpen","setModalOpen","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6a65652.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo_turkey.6bb90455.png\";","import * as React from 'react'\nimport Button from '@mui/material/Button'\n\ntype Props = {\n  onClick: () => void\n  text: string\n}\n\nconst AddButton: React.FC<Props> = ({ onClick, text }) => {\n  return (\n    <Button onClick={onClick} color=\"secondary\">\n      {text}\n    </Button>\n  )\n}\n\nexport default AddButton\n","import * as React from 'react'\nimport Modal from '@mui/material/Modal'\n\ntype Props = {\n  open: boolean\n  handleClose: () => void\n  children: any\n}\n\nconst FormModal: React.FC<Props> = ({ open, handleClose, children }) => {\n  return (\n    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n        style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n      >\n        <div style={{ backgroundColor: 'white', width: '40%', height: '70%' }}>{children}</div>\n      </Modal>\n    </div>\n  )\n}\n\nexport default FormModal\n","type Props = {\n  path: string\n  method: string\n  body?: any\n}\n\nexport default async (payload: Props) => {\n  const base = 'https://tasty-turkey.herokuapp.com'\n  const { path, method, body } = payload\n\n  const url = `${base}/${path}`\n\n  const response = await fetch(url, {\n    method,\n    headers: { 'Content-Type': 'application/json' },\n    body: body ? JSON.stringify(body) : undefined,\n  })\n\n  const responseBody = await response.json()\n  if (response.status !== 200) {\n    const { message } = responseBody\n    throw Error(message)\n  }\n  return responseBody\n}\n","import React, { useState } from 'react'\nimport { FormControl, InputLabel, Input } from '@mui/material'\nimport api from '../../api'\nimport Button from '../Button'\n\nconst Form: React.FC = () => {\n  const [title, setTitle] = useState('')\n  const [temp, setTemp] = useState('')\n  const [time, setTime] = useState('')\n  const [ingredients, setIngredients] = useState('')\n\n  const handleChangeTitle = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.target.value)\n  }\n  const handleChangeTemp = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setTemp(e.target.value)\n  }\n  const handleChangeTime = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setTime(e.target.value)\n  }\n  const handleChangeIngredients = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setIngredients(e.target.value)\n  }\n\n  const handleSubmit = async () => {\n    try {\n      return await api({\n        path: 'Recipes',\n        method: 'POST',\n        body: {\n          title,\n          temp: parseInt(temp, 10),\n          time: parseInt(time, 10),\n          ingredients: ingredients.split(', '),\n        },\n      })\n    } catch {\n      throw Error\n    }\n  }\n\n  return (\n    <>\n      <div\n        style={{ display: 'flex', flexDirection: 'column', marginLeft: 50, marginTop: 20 }}\n        className=\"input\"\n      >\n        <h2>Add your recipe</h2>\n        <FormControl style={{ marginTop: 20 }}>\n          <InputLabel htmlFor=\"title\">Title</InputLabel>\n          <Input\n            id=\"title\"\n            type=\"text\"\n            value={title}\n            onChange={handleChangeTitle}\n            style={{ width: '90%' }}\n          />\n        </FormControl>\n        <FormControl style={{ marginTop: 20 }}>\n          <InputLabel htmlFor=\"temp\">Temperature (F)</InputLabel>\n          <Input\n            id=\"temp\"\n            type=\"number\"\n            value={temp}\n            onChange={handleChangeTemp}\n            style={{ width: '90%' }}\n          />\n        </FormControl>\n        <FormControl style={{ marginTop: 20 }}>\n          <InputLabel htmlFor=\"time\">Time (min)</InputLabel>\n          <Input\n            id=\"time\"\n            type=\"number\"\n            value={time}\n            onChange={handleChangeTime}\n            style={{ width: '90%' }}\n          />\n        </FormControl>\n        <FormControl style={{ marginTop: 20 }}>\n          <InputLabel htmlFor=\"ingredients\">Ingredients</InputLabel>\n          <Input\n            id=\"ingredients\"\n            type=\"text\"\n            value={ingredients}\n            onChange={handleChangeIngredients}\n            style={{ width: '90%' }}\n            multiline\n          />\n        </FormControl>\n      </div>\n      <div style={{ marginLeft: 50, marginTop: 30 }}>\n        <Button onClick={() => handleSubmit()} text=\"Submit\" />\n      </div>\n    </>\n  )\n}\n\nexport default Form\n","export default __webpack_public_path__ + \"static/media/text_restaurant_name.2ac26f01.png\";","import React from 'react'\nimport AppBar from '@mui/material/AppBar'\nimport { Toolbar } from '@mui/material'\nimport TastyTurkeyText from '../../styles/assets/text_restaurant_name.png'\n\nexport const StyledAppBar = () => (\n  <AppBar position=\"sticky\" style={{ background: '#fff', height: '70px', textAlign: 'center' }}>\n    <Toolbar style={{ margin: 'auto', display: 'flex' }}>\n      <img src={TastyTurkeyText} alt=\"tasty turkey\" style={{ height: '50px' }} />\n    </Toolbar>\n  </AppBar>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Dashboard = () => (\n  <div>\n    <Link to=\"detail\">Recipes</Link>\n  </div>\n)\n","import { Button } from '@mui/material'\nimport React from 'react'\nimport logo from '../../styles/assets/logo_turkey.png'\nimport './styles.scss'\n\ninterface Props {\n  title: string\n  ingredients: string[]\n  temp: number\n  time: number\n  setSelectedRecipe: React.Dispatch<React.SetStateAction<any | null>>\n}\n\nexport const DetailCard: React.FC<Props> = ({\n  title,\n  ingredients,\n  temp,\n  time,\n  setSelectedRecipe,\n}) => {\n  return (\n    <div id=\"detail-card\">\n      <div className=\"detail-card-header\">\n        <h3>{title}</h3>\n        <img height={120} width={120} src={logo} alt=\"Turkey\" />\n      </div>\n\n      <div className=\"detail-card-body\">\n        <h3>Ingredients:</h3>\n        <ul>\n          {ingredients.map((ingredient) => (\n            <li key={Math.random()}>{ingredient}</li>\n          ))}\n        </ul>\n        <h3>Instructions</h3>\n        <ol>\n          <li key={Math.random()}>Temp: {temp}</li>\n          <li key={Math.random()}>Time: {time}</li>\n        </ol>\n      </div>\n\n      <Button onClick={() => setSelectedRecipe(null)}>Close</Button>\n    </div>\n  )\n}\n","import { Button } from '@mui/material'\nimport React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport api from '../../api'\nimport { DetailCard } from '../../components/DetailCard'\nimport { Recipe } from '../../models'\n\nconst getRecipes = async () => {\n  try {\n    return await api({\n      path: 'Recipes',\n      method: 'GET',\n    })\n  } catch {\n    throw Error\n  }\n}\n\nexport const Detail = () => {\n  const [selectedRecipe, setSelectedRecipe] = useState<null | Recipe>(null)\n  const [recipes, setRecipes] = useState<[] | Recipe[]>([])\n  useEffect(() => {\n    async function fetchRecipes() {\n      setRecipes(await getRecipes())\n    }\n\n    fetchRecipes()\n  }, [])\n\n  return (\n    <div id=\"background-gradient\">\n      <h1>Detail page</h1>\n\n      <div className=\"recipes-wrapper\">\n        {recipes.map((recipe: Recipe) => (\n          <div key={Math.random()} className=\"recipe-row\">\n            <h3>{recipe.title}</h3>\n            <Button onClick={() => setSelectedRecipe(recipe)}>View Recipe</Button>\n          </div>\n        ))}\n        <Link to=\"/\">\n          <Button>Back</Button>\n        </Link>\n      </div>\n      {selectedRecipe !== null && (\n        <DetailCard\n          title={selectedRecipe.title}\n          ingredients={selectedRecipe.ingredients}\n          temp={selectedRecipe.temp}\n          time={selectedRecipe.time}\n          setSelectedRecipe={setSelectedRecipe}\n        />\n      )}\n    </div>\n  )\n}\n","import { Routes, Route } from 'react-router-dom'\nimport React, { useState } from 'react'\nimport logo from './styles/assets/logo_turkey.png'\nimport './styles/App.scss'\nimport Button from './components/Button'\nimport FormModal from './components/Modal'\nimport Form from './components/Form'\nimport { StyledAppBar } from './components/AppBar'\nimport { Dashboard } from './pages/Dashboard'\nimport { Detail } from './pages/Detail'\n\nfunction App() {\n  const [modalOpen, setModalOpen] = useState<boolean>(false)\n  const handleOpen = () => {\n    setModalOpen(true)\n  }\n\n  return (\n    <div className=\"App layout\">\n      <StyledAppBar />\n      <div className=\"app-container\">\n        <header className=\"App-header text-center\">\n          <img height=\"256\" width=\"256\" src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n\n        <Routes>\n          <Route path=\"/\" element={<Dashboard />} />\n          <Route path=\"detail\" element={<Detail />} />\n        </Routes>\n\n        <Button onClick={handleOpen} text=\"Add Recipe\" />\n        <FormModal open={modalOpen} handleClose={() => setModalOpen(false)}>\n          <Form />\n        </FormModal>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\n\nimport './styles/App.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}